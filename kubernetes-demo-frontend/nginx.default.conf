server {
  listen 8080;
  root  /var/www/html/kubernetes-demo-frontend;
  index index.html;
  access_log off; # access log is off as it will fill up the log file with js/png/svg etc. requests
  gzip on;
  gzip_types
    text/plain
    application/javascript
    application/x-javascript
    text/javascript
    text/xml
    text/css
    application/json;
  gzip_min_length 1000;
  gzip_disable    "msie6"; # disable gzip for IE<=6
  gzip_vary       on; # send Vary: Accept-Encoding header
  gzip_proxied    any; # enable compression for proxied requests

  location / {
    # allows to refresh without 404 error
    try_files $uri $uri/ /index.html;
  }

  location ~ .*static/js/.*js$ {
    log_not_found     on;
    expires -1;
    add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
  }

  # Json asset files are not hashed currenlty so we need to disable them from being cached
  location ~* \.(?:json|ico)$ {
    expires -1;
    add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
  }

  # this block will catch files that might need to change immediately (e. g. to deploy hotfixes), such as js or css
  # The ?: prefix is a 'non-capturing' mark, meaning we do not require
  # the pattern to be captured into $1 which should help improve performance
  location ~* \.(?:css|js|gz)$ {
    log_not_found     off;
    gzip_static on;

    # no-cache:         forces caches to submit the request to the origin server for validation before releasing a
    #                   cached copy, every time. This is useful to assure that authentication is respected
    #                   (in combination with public), or to maintain rigid freshness, without sacrificing all of the
    #                   benefits of caching.
    #
    # public:           marks authenticated responses as cacheable; normally, if HTTP authentication is required,
    #                   responses are automatically private.
    #
    # must-revalidate:  tells caches that they must obey any freshness information you give them about a
    #                   representation. HTTP allows caches to serve stale representations under special conditions;
    #                   by specifying this header, youâ€™re telling the cache that you want it to strictly follow
    #                   your rules.
    #
    # proxy-revalidate: similar to must-revalidate, except that it only applies to proxy caches.
    #
    expires           max;
    add_header        Cache-Control "public";
  }

}
